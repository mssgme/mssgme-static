{"version":3,"sources":["webpack:////Users/sa2rn/Projects/inbox/packages/landings/src/Core/Page/PageBlocks/ServicesGrid/ServicesModal.scss?8aab","webpack:////Users/sa2rn/Projects/inbox/packages/landings/src/Core/Page/PageBlocks/ServicesGrid/ServicesModal.js"],"names":["module","exports","animate","from","to","transition","startAnimation","stop","ServicesModal","services","contacts","activeIndex","interactive","onClose","onClosing","themeStyles","handleHash","page","usePageData","backgroundColor","usePageTheme","style","history","useHistory","opacity","useMotionValue","hasMultipleServices","length","contactBlocks","useMemo","filter","enabled","map","blockId","blocks","find","_id","handleSlideChange","useCallback","swiper","replace","realIndex","handleClose","location","pathname","type","stiffness","onComplete","useEffect","ReactDom","createPortal","div","className","styles","root","content","allowTouchMove","initialSlide","noSwipingClass","noSwiping","spaceBetween","slidesPerView","speed","onInit","onSlideChange","service","index","key","slide","isActive","isPrev","isNext","document","querySelector","SwiperCore","use","Navigation","propTypes","PropTypes","array","isRequired","number","func","object","bool","defaultProps"],"mappings":"iFACAA,EAAOC,QAAU,CAAC,KAAO,YAAY,OAAS,YAAY,SAAW,YAAY,QAAU,YAAY,YAAc,YAAY,QAAU,YAAY,OAAS,WAAW,MAAQ,YAAY,UAAY,c,kCCD3M,mPAeMC,EAAU,SAACC,EAAMC,EAAIC,GAGvB,OAFKC,YAAe,GAAIH,EAAMC,EAAIC,GAE3B,CACHE,KAAM,kBAAMJ,EAAKI,UAMV,SAASC,EAAT,GASZ,IARCC,EAQD,EARCA,SACAC,EAOD,EAPCA,SACAC,EAMD,EANCA,YACAC,EAKD,EALCA,YACAC,EAID,EAJCA,QACAC,EAGD,EAHCA,UACAC,EAED,EAFCA,YACAC,EACD,EADCA,WAEMC,EAAOC,cAEAC,EACTC,YAAaH,GAAM,GAAM,GADzBI,MAASF,gBAEPG,EAAUC,cACVC,EAAUC,YAAe,GAGzBC,EAAsBjB,EAASkB,OAAS,EAGxCC,EAAgBC,mBAClB,kBACInB,EACKoB,QAAO,qBAAGC,WACVC,KAAI,gBAAGC,EAAH,EAAGA,QAAH,OAAiBhB,EAAKiB,OAAOC,MAAK,qBAAGC,MAAkBH,UACpE,CAAChB,EAAMP,IAWL2B,EAAoBC,uBACtB,SAACC,GACOvB,GACAM,EAAQkB,QAAQ,IAAM/B,EAAS8B,EAAOE,WAAWL,OAGzD,CAACpB,EAAYP,IAEXiC,EAAcJ,uBAAY,WACxBtB,GACAM,EAAQkB,QAAQlB,EAAQqB,SAASC,UAGrC9B,GAAaA,IAEbZ,EAAQsB,EAAS,EAAG,CAChBqB,KAAM,SACNC,UAAW,IACXC,WAAYlC,MAEjB,CAACA,EAASC,EAAWE,IAWxB,OATAgC,qBAAU,WAMN,OALiB9C,EAAQsB,EAAS,EAAG,CACjCqB,KAAM,SACNC,UAAW,MAGCvC,OACjB,IAEI0C,IAASC,aACZ,kBAAC,IAAOC,IAAR,CAAYC,UAAWC,IAAOC,KAAMjC,MAAO,CAAEG,UAASL,oBAmBlD,yBAAKiC,UAAWC,IAAOE,SACnB,kBAAC,IAAD,CACIH,UAAWC,IAAOd,OAClBiB,eAAgB9B,EAChB+B,aAAc9C,EACd+C,eAAgBL,IAAOM,UACvBC,aAAc,EACdC,cAAe,EAKfC,MAAO,IAGPC,OAAQ1B,EACR2B,cAAe3B,GAEd5B,EAASuB,KAAI,SAACiC,EAASC,GAAV,OACV,kBAAC,IAAD,CAAaC,IAAKF,EAAQ7B,KAAO8B,EAAOd,UAAWC,IAAOe,QACrD,gBAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,OAAQC,EAArB,EAAqBA,OAArB,OACG,kBAAC,IAAD,CACIxD,YAAaA,EACbkD,QAASA,EACTvD,SAAUkB,EACVyC,SAAUA,EACVC,OAAQA,EACRC,OAAQA,EACR3D,YAAaA,EACbC,QAAS6B,aAQrC8B,SAASC,cAAc,0BA/H/BC,IAAWC,IAAI,CAACC,MAmIhBpE,EAAcqE,UAAY,CACtBpE,SAAUqE,IAAUC,MAAMC,WAC1BtE,SAAUoE,IAAUC,MAAMC,WAC1BrE,YAAamE,IAAUG,OAAOD,WAC9BnE,QAASiE,IAAUI,KAAKF,WACxBlE,UAAWgE,IAAUI,KACrBnE,YAAa+D,IAAUK,OAAOH,WAC9BhE,WAAY8D,IAAUM,KACtBxE,YAAakE,IAAUM,MAG3B5E,EAAc6E,aAAe,CACzBrE,YAAY,EACZJ,aAAa","file":"28.6c90c3ee7db41e949910.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"_1Z4KtA9V\",\"header\":\"_3yNDvia2\",\"controls\":\"_14FyFLZK\",\"control\":\"_2w3ISXv9\",\"closeButton\":\"_23-b4rxX\",\"content\":\"_36gyr4Ls\",\"swiper\":\"lCawukuJ\",\"slide\":\"_33gRtRGf\",\"noSwiping\":\"_1OY5PMto\"};","import PropTypes from 'prop-types';\nimport React, { useCallback, useEffect, useMemo } from 'react';\nimport ReactDom from 'react-dom';\nimport { useHistory } from 'react-router';\n// import { FiChevronLeft, FiChevronRight, FiX } from 'react-icons/fi';\nimport { motion, startAnimation, useMotionValue } from 'framer-motion';\nimport SwiperCore, { Navigation } from 'swiper';\nimport { Swiper, SwiperSlide } from 'swiper/react';\n\n// import { useIsMobile } from '@mssgme/ui';\nimport { usePageData, usePageTheme } from '../../../hooks';\nimport { ServiceContent } from '../../../UI';\n\nimport styles from './ServicesModal.scss';\n\nconst animate = (from, to, transition) => {\n    void startAnimation('', from, to, transition);\n\n    return {\n        stop: () => from.stop(),\n    };\n};\n\nSwiperCore.use([Navigation]);\n\nexport default function ServicesModal({\n    services,\n    contacts,\n    activeIndex,\n    interactive,\n    onClose,\n    onClosing,\n    themeStyles,\n    handleHash,\n}) {\n    const page = usePageData();\n    const {\n        style: { backgroundColor },\n    } = usePageTheme(page, true, true);\n    const history = useHistory();\n    const opacity = useMotionValue(0);\n    // const navigationPrevRef = React.useRef(null);\n    // const navigationNextRef = React.useRef(null);\n    const hasMultipleServices = services.length > 1;\n    // const isMobile = useIsMobile();\n\n    const contactBlocks = useMemo(\n        () =>\n            contacts\n                .filter(({ enabled }) => enabled)\n                .map(({ blockId }) => page.blocks.find(({ _id }) => _id === blockId)),\n        [page, contacts]\n    );\n\n    // const handleInit = useCallback(\n    //     (swiper) => {\n    //         swiper.params.navigation.prevEl = navigationPrevRef.current;\n    //         swiper.params.navigation.nextEl = navigationNextRef.current;\n    //         swiper.navigation.update();\n    //     },\n    //     [navigationPrevRef, navigationNextRef]\n    // );\n    const handleSlideChange = useCallback(\n        (swiper) => {\n            if (handleHash) {\n                history.replace('#' + services[swiper.realIndex]._id);\n            }\n        },\n        [handleHash, services]\n    );\n    const handleClose = useCallback(() => {\n        if (handleHash) {\n            history.replace(history.location.pathname);\n        }\n\n        onClosing && onClosing();\n\n        animate(opacity, 0, {\n            type: 'spring',\n            stiffness: 100,\n            onComplete: onClose,\n        });\n    }, [onClose, onClosing, handleHash]);\n\n    useEffect(() => {\n        const controls = animate(opacity, 1, {\n            type: 'spring',\n            stiffness: 100,\n        });\n\n        return controls.stop;\n    }, []);\n\n    return ReactDom.createPortal(\n        <motion.div className={styles.root} style={{ opacity, backgroundColor }}>\n            {/*<div className={styles.header} style={{ color: themeStyles.color }}>*/}\n            {/*    <div className={styles.closeButton} onClick={handleClose}>*/}\n            {/*        <FiX size={24} />*/}\n            {/*    </div>*/}\n            {/*    /!*{hasMultipleServices && (*!/*/}\n            {/*    /!*    <div className={styles.controls} style={{ display: isMobile ? 'none' : null }}>*!/*/}\n            {/*    /!*        <div className={styles.control} ref={navigationPrevRef}>*!/*/}\n            {/*    /!*            <FiChevronLeft size={24} />*!/*/}\n            {/*    /!*        </div>*!/*/}\n            {/*    /!*        <div className={styles.control} ref={navigationNextRef}>*!/*/}\n            {/*    /!*            <FiChevronRight size={24} />*!/*/}\n            {/*    /!*        </div>*!/*/}\n            {/*    /!*    </div>*!/*/}\n            {/*    /!*)}*!/*/}\n            {/*    <div className={styles.closeButton} style={{ opacity: 0, pointerEvents: 'none' }}>*/}\n            {/*        <FiX size={24} />*/}\n            {/*    </div>*/}\n            {/*</div>*/}\n            <div className={styles.content}>\n                <Swiper\n                    className={styles.swiper}\n                    allowTouchMove={hasMultipleServices}\n                    initialSlide={activeIndex}\n                    noSwipingClass={styles.noSwiping}\n                    spaceBetween={0}\n                    slidesPerView={1}\n                    // navigation={{\n                    //     prevEl: navigationPrevRef.current || undefined,\n                    //     nextEl: navigationNextRef.current || undefined,\n                    // }}\n                    speed={600}\n                    // watchOverflow={services.length > 1}\n                    // loop={services.length > 1}\n                    onInit={handleSlideChange}\n                    onSlideChange={handleSlideChange}\n                >\n                    {services.map((service, index) => (\n                        <SwiperSlide key={service._id || index} className={styles.slide}>\n                            {({ isActive, isPrev, isNext }) => (\n                                <ServiceContent\n                                    themeStyles={themeStyles}\n                                    service={service}\n                                    contacts={contactBlocks}\n                                    isActive={isActive}\n                                    isPrev={isPrev}\n                                    isNext={isNext}\n                                    interactive={interactive}\n                                    onClose={handleClose}\n                                />\n                            )}\n                        </SwiperSlide>\n                    ))}\n                </Swiper>\n            </div>\n        </motion.div>,\n        document.querySelector('#page_root, #mainRoot')\n    );\n}\n\nServicesModal.propTypes = {\n    services: PropTypes.array.isRequired,\n    contacts: PropTypes.array.isRequired,\n    activeIndex: PropTypes.number.isRequired,\n    onClose: PropTypes.func.isRequired,\n    onClosing: PropTypes.func,\n    themeStyles: PropTypes.object.isRequired,\n    handleHash: PropTypes.bool,\n    interactive: PropTypes.bool,\n};\n\nServicesModal.defaultProps = {\n    handleHash: true,\n    interactive: true,\n};\n"],"sourceRoot":""}